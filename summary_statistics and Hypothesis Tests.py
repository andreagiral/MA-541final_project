# -*- coding: utf-8 -*-
"""Summary_Statistics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MTBgmffKoT9z-xC_7-s4HyF5AR1oImAq
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from tabulate import tabulate
from scipy.stats import ttest_ind, mannwhitneyu

original_data = pd.read_csv('/content/surv_variants_cleaned.csv')

#summary statistics
def generate_summary_statistics_limited(df):
    summary = {}

    numerical_columns = df.select_dtypes(include=['number']).drop(columns=['first_seq', 'last_seq'], errors='ignore')
    summary['Descriptive Statistics'] = numerical_columns.describe().round(3)

    # unique count
    unique_values = pd.DataFrame({
        'Metric': ['Countries', 'Variants', 'Continents'],
        'Unique Count': [df['Country'].nunique(), df['variant'].nunique(), df['Continent'].nunique()]
    })

    summary['Unique Values'] = unique_values

    return summary

#generate statistics
summary_statistics = generate_summary_statistics_limited(original_data)


print("\n Descriptive Statistics:")
print(tabulate(summary_statistics['Descriptive Statistics'], headers='keys', tablefmt='pretty'))

print("\n Unique Values:")
print(tabulate(summary_statistics['Unique Values'], headers='keys', tablefmt='pretty'))

# top 10 countries with the highest number of cases
top_10_cases = original_data.groupby('Country')['total_cases'].sum().nlargest(10).reset_index()
top_10_cases['total_cases'] = top_10_cases['total_cases'].astype(int).apply(lambda x: f"{x:,}")

# top 10 countries with the highest number of deaths
top_10_deaths = original_data.groupby('Country')['total_deaths'].sum().nlargest(10).reset_index()
top_10_deaths['total_deaths'] = top_10_deaths['total_deaths'].astype(int).apply(lambda x: f"{x:,}")

print("\n Top 10 Countries by Total Cases:")
print(tabulate(top_10_cases, headers='keys', tablefmt='pretty', numalign="right"))

print("\n Top 10 Countries by Total Deaths:")
print(tabulate(top_10_deaths, headers='keys', tablefmt='pretty', numalign="right"))

#mean duration by variant
mean_duration_by_variant = original_data.groupby('variant')['duration'].mean().reset_index()
mean_duration_by_variant = mean_duration_by_variant.sort_values(by='duration', ascending=False)

fig, ax = plt.subplots(figsize=(10, 12))
y_positions = range(len(mean_duration_by_variant))
ax.barh(y_positions, mean_duration_by_variant['duration'], color='skyblue', edgecolor='black', align='center')

ax.set_yticks(y_positions)
ax.set_yticklabels(mean_duration_by_variant['variant'])

ax.set_xlabel("# of Days")
ax.set_title("Variants persistency")

ax.invert_yaxis()
ax.grid(axis='x', linestyle='--', alpha=0.7)

plt.show()

df = original_data.copy()
df.columns = df.columns.str.strip()

df = df.dropna(subset=['mortality_rate', 'growth_rate', 'Continent'])

# Independent Two-Sample t-Test
median_growth = df['growth_rate'].median()
high_growth = df[df['growth_rate'] > median_growth]['mortality_rate']
low_growth = df[df['growth_rate'] <= median_growth]['mortality_rate']
t_stat, t_pval = ttest_ind(high_growth, low_growth, equal_var=False)

# Mann–Whitney U Test
asia = df[df['Continent'] == 'Asia']['mortality_rate']
europe = df[df['Continent'] == 'Europe']['mortality_rate']
u_stat, u_pval = mannwhitneyu(asia, europe, alternative='two-sided')

# Test results
test_results_df = pd.DataFrame({
    "Test": [
        "Two-Sample t-Test",
        "Mann–Whitney U Test"
    ],
    "Statistic": [round(t_stat, 4), round(u_stat, 2)],
    "p-value": [round(t_pval, 8), f"{u_pval:.2e}"]
})

test_results_df